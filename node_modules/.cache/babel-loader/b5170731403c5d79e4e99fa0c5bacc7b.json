{"ast":null,"code":"import _toConsumableArray from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment2/src/autocompleteTextbox.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport React, { useState, useRef, useEffect } from 'react';\n//import OpenAI from 'openai';\n\nfunction AutocompleteTextbox() {\n  var _this = this;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    inputValue = _useState2[0],\n    setInputValue = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    suggestionIndex = _useState4[0],\n    setSuggestionIndex = _useState4[1];\n  var suggestionsRef = useRef([]); // Use useRef for suggestions\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    displaySuggestions = _useState6[0],\n    setDisplaySuggestions = _useState6[1]; // Track whether to display suggestions\n  var inputRef = useRef(null);\n  var timeoutIdRef = useRef(null);\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    wordCount = _useState8[0],\n    setWordCount = _useState8[1]; //const [inputValue, setInputValue2] = useState('');\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    suggestionIndex2 = _useState10[0],\n    setSuggestionIndex2 = _useState10[1];\n  var suggestionsRef2 = useRef([]); // Use useRef for suggestions\n  //const [displaySuggestions, setDisplaySuggestions] = useState(false); // Track whether to display suggestions\n  var inputRef2 = useRef(null);\n  var timeoutIdRef2 = useRef(null);\n  //const [wordCount2, setWordCount2] = useState(0);\n\n  //const openai = new openAI();\n\n  var countWords = function countWords(input) {\n    var words = input.split(' ').filter(function (word) {\n      return word !== '';\n    }); // Split the input by spaces and remove empty strings\n    setWordCount(words.length);\n  };\n  var queryGPT2 = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", [\"I am so\", \"feeling great\", \"really happy\"]);\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function queryGPT2(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var queryGPT = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input) {\n      var userAnswers, age, gender, hobbies, funWithFriends, prompt, apiKey, endpoint, response, data;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            // Replace with your actual ChatGPT API call\n            userAnswers = JSON.parse(localStorage.getItem(\"userResponses\"));\n            console.log(userAnswers);\n            //{\"age\":\"12\",\"gender\":\"123\",\"hobbies\":\"sdf\",\"funWithFriends\":\"dsf\"}\n            age = userAnswers[\"age\"];\n            gender = userAnswers[\"gender\"];\n            hobbies = userAnswers[\"hobbies\"];\n            funWithFriends = userAnswers[\"funWithFriends\"];\n            console.log(age);\n            console.log(gender);\n            console.log(hobbies);\n            console.log(funWithFriends);\n\n            //const prompt = \"Imagine you are an autocomplete feature tailored to provide suggestions with extraverted connotations. Your goal is to assist the user in completing their sentences by offering contextually relevant endings that highlight their openness to experience in a social and outgoing manner. As you generate suggestions, lean towards choices that emphasize interactions, social events, group activities, and enthusiastic participation. Encourage the user to express their extroverted qualities and engage in experiences that involve others. An autocomplete feature finishes the sentece without suggesting what came before, so ONLY FINISH THE SENTENCE, without repeating the part I am about to tell you. How would you COMPLETE the following sentence? (DO NOT REPEAT THE BEGINNING)\"\n            //const prompt = `Imagine you are an autocomplete feature tailored to provide suggestions with extraverted connotations. Your goal is to assist the user in completing their sentences by offering contextually relevant endings that highlight their openness to experience in a social and outgoing manner. Suggest activities that are relevant to someone whose is ${gender}, ${age}, whose hobbies include ${hobbies}, and who describes themseves as enjoying doing ${funWithFriends} with their friends.  As you generate suggestions, lean towards choices that emphasize interactions, social events, group activities, and enthusiastic participation. Encourage the user to express their extroverted qualities and engage in experiences that involve others. An autocomplete feature finishes the sentece without suggesting what came before, so ONLY FINISH THE SENTENCE, without repeating the part I am about to tell you. How would you COMPLETE the following sentence? (DO NOT REPEAT THE BEGINNING)`\n            prompt = \"Imagine you are an autocomplete feature tailored to provide suggestions with extraverted connotations. Your goal is to assist the user in completing their sentences by offering contextually relevant endings that highlight their openness to experience in a social and outgoing manner. Suggest activities that are relevant to someone whose is \".concat(gender, \", \").concat(age, \", whose hobbies include \").concat(hobbies, \", and who describes themseves as enjoying doing \").concat(funWithFriends, \" with their friends.  As you generate suggestions, lean towards choices that emphasize interactions, social events, group activities, and enthusiastic participation, with activites circling around \").concat(hobbies, \" and \").concat(funWithFriends, \". Encourage the user to express their extroverted qualities like what they normally enjoy doing with their friends (\").concat(funWithFriends, \"), and encourage them to engage in the extraverted parts of their hobbies (\").concat(hobbies, \"). \\n\\n    As an autocomplete feature, you must finish the sentence that I begin. Do not suggest what came before, so when I send you the input, you must ONLY FINISH THE SENTENCE, without repitition. How would you COMPLETE the following sentence? (DO NOT REPEAT THE BEGINNING)\");\n            apiKey = process.env.REACT_APP_GPT_KEY; //const apiKey = Netlify.env.get(\"REACT_APP_GPT_KEY\")\n            console.log(apiKey);\n            endpoint = 'https://api.openai.com/v1/chat/completions';\n            console.log(prompt);\n            console.log(input);\n            _context2.next = 18;\n            return fetch(endpoint, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: \"Bearer \".concat(apiKey)\n              },\n              body: JSON.stringify({\n                messages: [{\n                  role: \"system\",\n                  content: prompt + input\n                }],\n                //prompt: prompt + input,\n                max_tokens: 20,\n                // Adjust the number of tokens as needed\n                model: 'gpt-3.5-turbo'\n              })\n            });\n          case 18:\n            response = _context2.sent;\n            _context2.next = 21;\n            return response.json();\n          case 21:\n            data = _context2.sent;\n            console.log(data);\n            console.log(data.choices[0].message.content);\n            return _context2.abrupt(\"return\", [data.choices[0].message.content]);\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function queryGPT(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var fetchSuggestions = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(input) {\n      var newSuggestions, newSuggestions2;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return queryGPT(input);\n          case 2:\n            newSuggestions = _context3.sent;\n            suggestionsRef.current = newSuggestions; // Update the suggestions with the new values\n            _context3.next = 6;\n            return queryGPT(input);\n          case 6:\n            newSuggestions2 = _context3.sent;\n            suggestionsRef2.current = newSuggestions2; // Update the suggestions with the new values\n            setDisplaySuggestions(true); // Display suggestions after fetching\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return function fetchSuggestions(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var fetchSuggestions2 = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(input) {\n      var newSuggestions2;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return queryGPT(input);\n          case 2:\n            newSuggestions2 = _context4.sent;\n            suggestionsRef2.current = newSuggestions2; // Update the suggestions with the new values\n            setDisplaySuggestions(true); // Display suggestions after fetching\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return function fetchSuggestions2(_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handleInputChange = function handleInputChange(event) {\n    var newValue = event.target.value;\n    setInputValue(newValue);\n    suggestionsRef.current = []; // Clear suggestions on every keystroke\n    suggestionsRef2.current = [];\n    setDisplaySuggestions(false); // Hide suggestions on input change\n    countWords(newValue);\n    clearTimeout(timeoutIdRef.current);\n    if (newValue.endsWith(\" \")) {\n      timeoutIdRef.current = setTimeout(function () {\n        fetchSuggestions(newValue);\n        //fetchSuggestions2(newValue);\n      }, 2000); // 3000 milliseconds = 3 seconds\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault(); // Prevent the default Tab behavior\n\n      if (displaySuggestions && suggestionsRef.current.length > 0) {\n        var suggestionSentence = suggestionsRef.current[0];\n        var words = suggestionSentence.split(' ');\n        if (words.length > 0) {\n          var selectedWord = words[0];\n          var updatedValue = inputValue.trimEnd() + ' ' + selectedWord + ' ';\n          setInputValue(updatedValue);\n\n          // Remove only the first word from the suggestions\n          var remainingWords = words.slice(1);\n          var remainingSentence = remainingWords.join(' ');\n          var remainingSuggestions = _toConsumableArray(suggestionsRef.current);\n          remainingSuggestions[0] = remainingSentence;\n          suggestionsRef.current = remainingSuggestions;\n          if (remainingWords.length === 0) {\n            setDisplaySuggestions(false); // Hide suggestions when no words are left\n          }\n        }\n      }\n    }\n\n    if (event.key === '2') {\n      event.preventDefault(); // Prevent the default Tab behavior\n\n      if (displaySuggestions && suggestionsRef2.current.length > 0) {\n        var suggestionSentence2 = suggestionsRef2.current[0];\n        var _words = suggestionSentence2.split(' ');\n        if (_words.length > 0) {\n          var _selectedWord = _words[0];\n          var _updatedValue = inputValue.trimEnd() + ' ' + _selectedWord + ' ';\n          setInputValue(_updatedValue);\n\n          // Remove only the first word from the suggestions\n          var _remainingWords = _words.slice(1);\n          var _remainingSentence = _remainingWords.join(' ');\n          var _remainingSuggestions = _toConsumableArray(suggestionsRef.current);\n          _remainingSuggestions[0] = _remainingSentence;\n          suggestionsRef.current = _remainingSuggestions;\n          if (_remainingWords.length === 0) {\n            setDisplaySuggestions(false); // Hide suggestions when no words are left\n          }\n        }\n      }\n    }\n  };\n\n  var handleKeyDown2 = function handleKeyDown2(event) {\n    if (event.key === '2') {\n      event.preventDefault(); // Prevent the default Tab behavior\n\n      if (displaySuggestions && suggestionsRef.current.length > 0) {\n        var selectedWord = suggestionsRef.current[0].split(' ')[0];\n        var updatedValue = inputValue.trimEnd() + ' ' + selectedWord + ' ';\n        setInputValue(updatedValue);\n        var remainingSuggestions = suggestionsRef.current.slice(1);\n        suggestionsRef.current = remainingSuggestions;\n        if (remainingSuggestions.length === 0) {\n          setDisplaySuggestions(false); // Hide suggestions when no suggestions are left\n        }\n      } else {\n        // If there are no suggestions left, continue with default Tab behavior\n        inputRef.current.dispatchEvent(new KeyboardEvent('keydown', {\n          key: 'Tab',\n          bubbles: true\n        }));\n      }\n    }\n  };\n  useEffect(function () {\n    return function () {\n      return clearTimeout(timeoutIdRef.current);\n    };\n  }, []);\n  useEffect(function () {\n    if (!inputValue.endsWith(\" \")) {\n      setDisplaySuggestions(false);\n    }\n  }, [inputValue]);\n  return (\n    /*#__PURE__*/\n    //<div>\n    React.createElement(\"div\", {\n      className: \"input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"textarea\", {\n      ref: inputRef,\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onKeyDown: handleKeyDown /* Attach the handleKeyDown function */,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"word-count\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }, \"Word Count: \", wordCount), displaySuggestions && suggestionsRef.current.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-suggestion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }, suggestionsRef.current.map(function (suggestion, index) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }\n      }, suggestion);\n    })), displaySuggestions && suggestionsRef2.current.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-suggestion2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }\n    }, suggestionsRef2.current.map(function (suggestion2, index2) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index2,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }\n      }, suggestion2);\n    })), displaySuggestions && suggestionsRef.current.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"autocomplete-suggestion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, suggestionsRef.current.map(function (suggestion, index) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 15\n        }\n      }, suggestion);\n    })))\n    //</div>\n  );\n}\n\nexport default AutocompleteTextbox;","map":{"version":3,"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","_catch","thrown","delegateYield","React","useState","useRef","useEffect","AutocompleteTextbox","_this","_useState","_useState2","_slicedToArray","inputValue","setInputValue","_useState3","_useState4","suggestionIndex","setSuggestionIndex","suggestionsRef","_useState5","_useState6","displaySuggestions","setDisplaySuggestions","inputRef","timeoutIdRef","_useState7","_useState8","wordCount","setWordCount","_useState9","_useState10","suggestionIndex2","setSuggestionIndex2","suggestionsRef2","inputRef2","timeoutIdRef2","countWords","input","words","split","filter","word","queryGPT2","_ref","_asyncToGenerator","_callee","_callee$","_context","_x","apply","arguments","queryGPT","_ref2","_callee2","userAnswers","age","gender","hobbies","funWithFriends","prompt","apiKey","endpoint","response","data","_callee2$","_context2","JSON","parse","localStorage","getItem","console","log","concat","process","env","REACT_APP_GPT_KEY","fetch","headers","Authorization","body","stringify","messages","role","content","max_tokens","model","json","choices","message","_x2","fetchSuggestions","_ref3","_callee3","newSuggestions","newSuggestions2","_callee3$","_context3","current","_x3","fetchSuggestions2","_ref4","_callee4","_callee4$","_context4","_x4","handleInputChange","event","newValue","target","clearTimeout","endsWith","setTimeout","handleKeyDown","preventDefault","suggestionSentence","selectedWord","updatedValue","trimEnd","remainingWords","remainingSentence","join","remainingSuggestions","_toConsumableArray","suggestionSentence2","handleKeyDown2","dispatchEvent","KeyboardEvent","bubbles","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","onChange","onKeyDown","map","suggestion","index","suggestion2","index2"],"sources":["/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment2/src/autocompleteTextbox.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n//import OpenAI from 'openai';\n\nfunction AutocompleteTextbox() {\n  const [inputValue, setInputValue] = useState('');\n  const [suggestionIndex, setSuggestionIndex] = useState(0);\n  const suggestionsRef = useRef([]); // Use useRef for suggestions\n  const [displaySuggestions, setDisplaySuggestions] = useState(false); // Track whether to display suggestions\n  const inputRef = useRef(null);\n  const timeoutIdRef = useRef(null);\n  const [wordCount, setWordCount] = useState(0);\n\n  //const [inputValue, setInputValue2] = useState('');\n  const [suggestionIndex2, setSuggestionIndex2] = useState(0);\n  const suggestionsRef2 = useRef([]); // Use useRef for suggestions\n  //const [displaySuggestions, setDisplaySuggestions] = useState(false); // Track whether to display suggestions\n  const inputRef2 = useRef(null);\n  const timeoutIdRef2 = useRef(null);\n  //const [wordCount2, setWordCount2] = useState(0);\n\n  //const openai = new openAI();\n\n  const countWords = (input) => {\n    const words = input.split(' ').filter((word) => word !== ''); // Split the input by spaces and remove empty strings\n    setWordCount(words.length);\n  };\n  \n  const queryGPT2 = async (input) => {\n    // Simulate an API call to ChatGPT\n    // You can replace this with an actual API call to ChatGPT\n    return [\"I am so\", \"feeling great\", \"really happy\"]; // Dummy suggestions\n  };\n\n  const queryGPT = async (input) => {\n\n    // Replace with your actual ChatGPT API call\n    const userAnswers = JSON.parse(localStorage.getItem(\"userResponses\"))\n    console.log(userAnswers)\n//{\"age\":\"12\",\"gender\":\"123\",\"hobbies\":\"sdf\",\"funWithFriends\":\"dsf\"}\n    const age = userAnswers[\"age\"]\n    const gender = userAnswers[\"gender\"]\n    const hobbies = userAnswers[\"hobbies\"]\n    const funWithFriends = userAnswers[\"funWithFriends\"]\n    console.log(age)\n    console.log(gender)\n    console.log(hobbies)\n    console.log(funWithFriends)\n\n\n    //const prompt = \"Imagine you are an autocomplete feature tailored to provide suggestions with extraverted connotations. Your goal is to assist the user in completing their sentences by offering contextually relevant endings that highlight their openness to experience in a social and outgoing manner. As you generate suggestions, lean towards choices that emphasize interactions, social events, group activities, and enthusiastic participation. Encourage the user to express their extroverted qualities and engage in experiences that involve others. An autocomplete feature finishes the sentece without suggesting what came before, so ONLY FINISH THE SENTENCE, without repeating the part I am about to tell you. How would you COMPLETE the following sentence? (DO NOT REPEAT THE BEGINNING)\"\n    //const prompt = `Imagine you are an autocomplete feature tailored to provide suggestions with extraverted connotations. Your goal is to assist the user in completing their sentences by offering contextually relevant endings that highlight their openness to experience in a social and outgoing manner. Suggest activities that are relevant to someone whose is ${gender}, ${age}, whose hobbies include ${hobbies}, and who describes themseves as enjoying doing ${funWithFriends} with their friends.  As you generate suggestions, lean towards choices that emphasize interactions, social events, group activities, and enthusiastic participation. Encourage the user to express their extroverted qualities and engage in experiences that involve others. An autocomplete feature finishes the sentece without suggesting what came before, so ONLY FINISH THE SENTENCE, without repeating the part I am about to tell you. How would you COMPLETE the following sentence? (DO NOT REPEAT THE BEGINNING)`\n    const prompt = `Imagine you are an autocomplete feature tailored to provide suggestions with extraverted connotations. Your goal is to assist the user in completing their sentences by offering contextually relevant endings that highlight their openness to experience in a social and outgoing manner. Suggest activities that are relevant to someone whose is ${gender}, ${age}, whose hobbies include ${hobbies}, and who describes themseves as enjoying doing ${funWithFriends} with their friends.  As you generate suggestions, lean towards choices that emphasize interactions, social events, group activities, and enthusiastic participation, with activites circling around ${hobbies} and ${funWithFriends}. Encourage the user to express their extroverted qualities like what they normally enjoy doing with their friends (${funWithFriends}), and encourage them to engage in the extraverted parts of their hobbies (${hobbies}). \n\n    As an autocomplete feature, you must finish the sentence that I begin. Do not suggest what came before, so when I send you the input, you must ONLY FINISH THE SENTENCE, without repitition. How would you COMPLETE the following sentence? (DO NOT REPEAT THE BEGINNING)`    \n    const apiKey = process.env.REACT_APP_GPT_KEY;\n    //const apiKey = Netlify.env.get(\"REACT_APP_GPT_KEY\")\n    console.log(apiKey)\n    const endpoint = 'https://api.openai.com/v1/chat/completions';\n\n    console.log(prompt)\n    console.log(input)\n\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        messages: [{ role: \"system\", content: prompt + input}],\n        //prompt: prompt + input,\n        max_tokens: 20, // Adjust the number of tokens as needed\n        model: 'gpt-3.5-turbo',\n      }),\n    });\n\n    const data = await response.json();\n    console.log(data)\n    console.log(data.choices[0].message.content)\n    return [data.choices[0].message.content];\n    //return data.choices[0].text.map((choice) => choice.text);\n  };\n\n  const fetchSuggestions = async (input) => {\n    const newSuggestions = await queryGPT(input);\n    suggestionsRef.current = newSuggestions; // Update the suggestions with the new values\n\n    const newSuggestions2 = await queryGPT(input);\n    suggestionsRef2.current = newSuggestions2; // Update the suggestions with the new values\n    setDisplaySuggestions(true); // Display suggestions after fetching\n  };\n\n  const fetchSuggestions2 = async (input) => {\n    const newSuggestions2 = await queryGPT(input);\n    suggestionsRef2.current = newSuggestions2; // Update the suggestions with the new values\n    setDisplaySuggestions(true); // Display suggestions after fetching\n  };\n\n  const handleInputChange = (event) => {\n    const newValue = event.target.value;\n    setInputValue(newValue);\n    suggestionsRef.current = []; // Clear suggestions on every keystroke\n    suggestionsRef2.current = [];\n    setDisplaySuggestions(false); // Hide suggestions on input change\n    countWords(newValue);\n    \n    clearTimeout(timeoutIdRef.current);\n    if (newValue.endsWith(\" \")) {\n      timeoutIdRef.current = setTimeout(() => {\n        fetchSuggestions(newValue);\n        //fetchSuggestions2(newValue);\n      }, 2000); // 3000 milliseconds = 3 seconds\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Tab') {\n      event.preventDefault(); // Prevent the default Tab behavior\n  \n      if (displaySuggestions && suggestionsRef.current.length > 0) {\n        const suggestionSentence = suggestionsRef.current[0];\n        const words = suggestionSentence.split(' ');\n  \n        if (words.length > 0) {\n          const selectedWord = words[0];\n          const updatedValue = inputValue.trimEnd() + ' ' + selectedWord + ' ';\n          setInputValue(updatedValue);\n  \n          // Remove only the first word from the suggestions\n          const remainingWords = words.slice(1);\n          const remainingSentence = remainingWords.join(' ');\n          const remainingSuggestions = [...suggestionsRef.current];\n          remainingSuggestions[0] = remainingSentence;\n          suggestionsRef.current = remainingSuggestions;\n  \n          if (remainingWords.length === 0) {\n            setDisplaySuggestions(false); // Hide suggestions when no words are left\n          }\n        }\n      }\n    }\n\n    if (event.key === '2') {\n      event.preventDefault(); // Prevent the default Tab behavior\n  \n      if (displaySuggestions && suggestionsRef2.current.length > 0) {\n        const suggestionSentence2 = suggestionsRef2.current[0];\n        const words = suggestionSentence2.split(' ');\n  \n        if (words.length > 0) {\n          const selectedWord = words[0];\n          const updatedValue = inputValue.trimEnd() + ' ' + selectedWord + ' ';\n          setInputValue(updatedValue);\n  \n          // Remove only the first word from the suggestions\n          const remainingWords = words.slice(1);\n          const remainingSentence = remainingWords.join(' ');\n          const remainingSuggestions = [...suggestionsRef.current];\n          remainingSuggestions[0] = remainingSentence;\n          suggestionsRef.current = remainingSuggestions;\n  \n          if (remainingWords.length === 0) {\n            setDisplaySuggestions(false); // Hide suggestions when no words are left\n          }\n        }\n      }\n    }\n\n    \n  };\n  \n  \n  \n  const handleKeyDown2 = (event) => {\n    if (event.key === '2') {\n      event.preventDefault(); // Prevent the default Tab behavior\n\n      if (displaySuggestions && suggestionsRef.current.length > 0) {\n        const selectedWord = suggestionsRef.current[0].split(' ')[0];\n        const updatedValue = inputValue.trimEnd() + ' ' + selectedWord + ' ';\n        setInputValue(updatedValue);\n\n        const remainingSuggestions = suggestionsRef.current.slice(1);\n        suggestionsRef.current = remainingSuggestions;\n\n        if (remainingSuggestions.length === 0) {\n          setDisplaySuggestions(false); // Hide suggestions when no suggestions are left\n        }\n      } else {\n        // If there are no suggestions left, continue with default Tab behavior\n        inputRef.current.dispatchEvent(new KeyboardEvent('keydown', { key: 'Tab', bubbles: true }));\n      }\n    }\n  };\n\n  useEffect(() => {\n    return () => clearTimeout(timeoutIdRef.current);\n  }, []);\n\n  useEffect(() => {\n    if (!inputValue.endsWith(\" \")) {\n      setDisplaySuggestions(false);\n    }\n  }, [inputValue]);\n\n  return (\n    //<div>\n      <div className=\"input-container\">\n        <textarea\n          ref={inputRef}\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown} /* Attach the handleKeyDown function */\n        />\n        <div className=\"word-count\">Word Count: {wordCount}</div>\n        \n        {displaySuggestions && suggestionsRef.current.length > 0 && (\n          <div className=\"autocomplete-suggestion\">\n            {suggestionsRef.current.map((suggestion, index) => (\n              <div key={index}>{suggestion}</div>\n            ))}\n          </div>\n        )}\n\n        {displaySuggestions && suggestionsRef2.current.length > 0 && (\n          <div className=\"autocomplete-suggestion2\">\n            {suggestionsRef2.current.map((suggestion2, index2) => (\n              <div key={index2}>{suggestion2}</div>\n            ))}\n          </div>\n        )}\n\n{displaySuggestions && suggestionsRef.current.length > 0 && (\n          <div className=\"autocomplete-suggestion\">\n            {suggestionsRef.current.map((suggestion, index) => (\n              <div key={index}>{suggestion}</div>\n            ))}\n          </div>\n        )}\n      </div>\n    //</div>\n  );\n}\n\nexport default AutocompleteTextbox;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}